pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/samiselim/DevSecOps-Netflix-Deployed-Application.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        // stage('OWASP FS SCAN') {
        //     steps {
        //         dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'dockerhubCred', toolName: 'docker'){   
                       sh "docker build --build-arg TMDB_V3_API_KEY=b4a35d4f223d038cb73cf86bd13f5050 -t netflix ."
                       sh "docker tag netflix samiselim/netflix:$BUILD_NUMBER"
                       sh "docker push samiselim/netflix:$BUILD_NUMBER"
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image samiselim/netflix:$BUILD_NUMBER > trivyimage.txt" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name netflix -p 8081:80 samiselim/netflix:$BUILD_NUMBER'
            }
        }
    }
    post {
        success {
            echo 'Pipeline succeeded! Yay!'
            emailext subject: 'Pipeline Success Notification',
                     body: 'Your Jenkins pipeline has succeeded.',
                     to: 'samiselim75@gmail.com'
        }
        failure {
            echo 'Pipeline failed! Oh no!'
            emailext subject: 'Pipeline Failure Notification',
                     body: 'Your Jenkins pipeline has failed.',
                     to: 'samiselim75@gmail.com'
        }
        always {
            echo 'Cleaning up...'
        }
    }
}
